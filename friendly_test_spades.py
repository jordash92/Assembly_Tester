from friendly_test_velvet import *
import os
import time
import Bio

""" Assemble fragments in SPAdes """

def run_spades(cov, k, f, c):
    """Run SPAdes from command line with appropriate parameters. Due to
    fragments being in fasta format, not fastq format "--only-assembler"
    is set. cov is coverage, k is k-value, f is file containing fragments
    and c is coverage cutoff"""
    os.system("python spades.py --s1 {} -k {} --only-assembler --cov-cutoff {} --phred-offset 64 -o spades_{}"
              .format(f, k, c, cov))

def spades_mismatch(contigs, genome):
    """Count number of contigs assembled by SPAdes and how many of those
    appear as an exact match in the original the genome. Contigs is a
    fasta file generated by SPAdes. Genome is nucleotide sequence of
    associated to the Genbank id of Haemophilus influenzae"""
    count3 = 0
    count4 = 0
    # count the number of contigs which SPAdes has assembled
    for contig in contigs:
        count4 += 1
        """Count the number of contigs which SPAdes has assembled which DO NOT
        appear as an exact match in the original genome. If == -1 means not
        present, therefore adds one to count"""
        if genome.find(str((contig.seq))) == -1:
            count3 += 1
    return count3, count4


# Call SPAdes and time how long it takes for the assembly to run in seconds

print dots, "\nAssembling fragments using SPAdes...\n", dots
start_spades_time = time.time()
run_spades(my_coverage, k_value, frag_file, cov_cutoff)
spades_duration = time.time() - start_spades_time
print dots, "\nSPAdes has sucessfully assembled the fragments!"

"""Assign variables to file containing contigs assembled using SPAdes
and to the whole genome."""

spades_contigs = Bio.SeqIO.parse("spades_{}/contigs.fasta"
                                 .format(my_coverage), "fasta")

# Call count of mismatches generated by SPAdes
count3, count4 = spades_mismatch(spades_contigs, genome)

# Generate statistics for both assemblies (Velvet and SPAdes)
print dots, "\nStatistics of Velvet assembly with {}x coverage".format(my_coverage)
print "Velvet took {0:.3f} seconds to asemble the runs".format(velvet_duration)
print "A total of {} contigs were assembled".format(count2)
print "{} mismatches out of {} contigs\n".format(count, count2), dots
print "Statistics of SPAdes assembly with {}x coverage".format(my_coverage)
print "SPAdes took {0:.3f} seconds to asemble the runs".format(spades_duration)
print "A total of {} contigs were assembled".format(count4)
print "{} mismatches out of {} contigs".format(count3, count4)
print dots, "\n * * * * * Thank you for using Assembly Tester! * * * * *\n", dots
